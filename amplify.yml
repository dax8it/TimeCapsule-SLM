version: 1
frontend:
  phases:
    preBuild:
      commands:
        - echo "Injecting environment variables..."
        - |
          cat > config.js << EOF
          // Configuration loader for SketchPad-SLM (Auto-generated by Amplify)
          class Config {
            constructor() {
              // Environment variables injected at build time
              this.GA4_MEASUREMENT_ID = '${GA4_MEASUREMENT_ID}' || 'G-XXXXXXXXXX';
              this.SITE_NAME = '${SITE_NAME}' || 'SketchPad-SLM';
              this.SITE_URL = '${SITE_URL}' || window.location.origin;
              this.GA4_DEBUG_MODE = ${GA4_DEBUG_MODE} || false;
              this.GA4_ANONYMIZE_IP = ${GA4_ANONYMIZE_IP} || true;
            }

            // Method to initialize Google Analytics
            initializeGA4() {
              if (!this.GA4_MEASUREMENT_ID || this.GA4_MEASUREMENT_ID === 'G-XXXXXXXXXX') {
                console.warn('GA4_MEASUREMENT_ID not configured');
                return;
              }

              // Load Google Analytics script
              const script1 = document.createElement('script');
              script1.async = true;
              script1.src = \`https://www.googletagmanager.com/gtag/js?id=\${this.GA4_MEASUREMENT_ID}\`;
              document.head.appendChild(script1);

              // Initialize gtag
              window.dataLayer = window.dataLayer || [];
              function gtag(){dataLayer.push(arguments);}
              window.gtag = gtag;
              
              gtag('js', new Date());
              gtag('config', this.GA4_MEASUREMENT_ID, {
                anonymize_ip: this.GA4_ANONYMIZE_IP,
                debug_mode: this.GA4_DEBUG_MODE,
                site_name: this.SITE_NAME
              });

              console.log(\`â Google Analytics 4 initialized with ID: \${this.GA4_MEASUREMENT_ID}\`);
            }

            // Method to track custom events
            trackEvent(action, category = 'engagement', label = '', value = 0) {
              if (window.gtag) {
                gtag('event', action, {
                  event_category: category,
                  event_label: label,
                  value: value
                });
                console.log(\`ð GA4 Event tracked: \${action} (\${category})\`);
              }
            }

            // Method to track page views
            trackPageView(page_title, page_location) {
              if (window.gtag) {
                gtag('event', 'page_view', {
                  page_title: page_title,
                  page_location: page_location
                });
              }
            }

            // Enhanced tracking methods for comprehensive analytics
            trackKeyEvent(action, details = {}) {
              if (window.gtag) {
                gtag('event', action, {
                  event_category: 'key_interaction',
                  custom_parameters: details,
                  ...details
                });
                console.log(\`🔑 Key Event tracked: \${action}\`, details);
              }
            }

            trackNavigation(item, location = '') {
              if (window.gtag) {
                gtag('event', 'navigation_click', {
                  event_category: 'navigation',
                  nav_item: item,
                  nav_location: location
                });
                console.log(\`🧭 Navigation tracked: \${item} at \${location}\`);
              }
            }

            trackModal(action, modalName) {
              if (window.gtag) {
                gtag('event', \`modal_\${action}\`, {
                  event_category: 'modal_interaction',
                  modal_name: modalName
                });
                console.log(\`📱 Modal tracked: \${action} - \${modalName}\`);
              }
            }

            trackAIInteraction(provider, action, details = {}) {
              if (window.gtag) {
                gtag('event', 'ai_interaction', {
                  event_category: 'ai_usage',
                  ai_provider: provider,
                  ai_action: action,
                  ...details
                });
                console.log(\`🤖 AI Interaction tracked: \${provider} - \${action}\`, details);
              }
            }

            trackDocumentOperation(operation, details = {}) {
              if (window.gtag) {
                gtag('event', 'document_operation', {
                  event_category: 'document_management',
                  doc_operation: operation,
                  ...details
                });
                console.log(\`📄 Document Operation tracked: \${operation}\`, details);
              }
            }

            trackResearchOperation(operation, details = {}) {
              if (window.gtag) {
                gtag('event', 'research_operation', {
                  event_category: 'research_activity',
                  research_operation: operation,
                  ...details
                });
                console.log(\`🔬 Research Operation tracked: \${operation}\`, details);
              }
            }

            trackChatInteraction(method, details = {}) {
              if (window.gtag) {
                gtag('event', 'chat_interaction', {
                  event_category: 'chat_usage',
                  interaction_method: method,
                  ...details
                });
                console.log(\`💬 Chat Interaction tracked: \${method}\`, details);
              }
            }

            // Device and capability tracking
            trackDeviceInfo() {
              if (window.gtag) {
                const deviceInfo = {
                  screen_resolution: \`\${screen.width}x\${screen.height}\`,
                  viewport_size: \`\${window.innerWidth}x\${window.innerHeight}\`,
                  user_agent: navigator.userAgent,
                  platform: navigator.platform,
                  language: navigator.language,
                  timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
                  connection_type: navigator.connection ? navigator.connection.effectiveType : 'unknown',
                  device_memory: navigator.deviceMemory || 'unknown',
                  hardware_concurrency: navigator.hardwareConcurrency || 'unknown'
                };

                gtag('event', 'device_info', {
                  event_category: 'device_analytics',
                  ...deviceInfo
                });
                
                console.log('📱 Device Info tracked:', deviceInfo);
              }
            }

            // Debug helper
            debugAnalytics() {
              console.log('🔍 Analytics Debug Info:');
              console.log('  - GA4 ID:', this.GA4_MEASUREMENT_ID);
              console.log('  - gtag available:', !!window.gtag);
              console.log('  - dataLayer length:', window.dataLayer ? window.dataLayer.length : 0);
              console.log('  - Available methods:', Object.getOwnPropertyNames(Object.getPrototypeOf(this)));
            }
          }

          // Create global config instance
          window.AppConfig = new Config();
          EOF
    build:
      commands:
        - echo "Build completed - config.js generated with environment variables"
  artifacts:
    baseDirectory: .
    files:
      - '**/*'
  cache:
    paths: []
  headers:
    - pattern: '**/*'
      headers:
        # Content Security Policy - Allow unsafe-eval for Monaco Editor and p5.js code execution
        Content-Security-Policy: >
          script-src 'self' 'unsafe-eval' 'unsafe-inline' https://cdn.jsdelivr.net https://unpkg.com;
          style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;
          connect-src 'self' https://api.openai.com https://www.googletagmanager.com https://www.google-analytics.com http://localhost:1234;
          img-src 'self' data: https: blob:;
          font-src 'self' data: https://cdn.jsdelivr.net;
          worker-src 'self' blob: data:;
          object-src 'none';
          base-uri 'self';
        # Additional security headers
        X-Frame-Options: DENY
        X-Content-Type-Options: nosniff
        Referrer-Policy: strict-origin-when-cross-origin
        Permissions-Policy: "camera=(), microphone=(), geolocation=()" 